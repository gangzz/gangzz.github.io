<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oauth2 | It's gangzz!]]></title>
  <link href="http://gangzz.github.io/blog/categories/oauth2/atom.xml" rel="self"/>
  <link href="http://gangzz.github.io/"/>
  <updated>2015-05-26T21:03:21+08:00</updated>
  <id>http://gangzz.github.io/</id>
  <author>
    <name><![CDATA[Willard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Obtaining Authorization]]></title>
    <link href="http://gangzz.github.io/blog/2015/02/24/obtaining-authorization/"/>
    <updated>2015-02-24T10:54:55+08:00</updated>
    <id>http://gangzz.github.io/blog/2015/02/24/obtaining-authorization</id>
    <content type="html"><![CDATA[<h1>Obtaining Authorization（获取授权）</h1>

<p>客户端通过向资源拥有者申请授权的方式获得Access Token。OAuth提供四种授权方式：授权码、简化授权、资源拥有者密码凭证、客户端凭证，并提供了扩展其它凭证的机制。</p>

<h2>4.1 Authorization Code Grant（授权码授权）</h2>

<p>授权码授权可以用于access token、refersh token的获取，并且非常适合机密客户端。因为这是一个重定向流程，客户都必须支持与资源拥有者的浏览器交互，并可以响应来自权限服务器的重定向请求。</p>

<pre><code> +----------+
 | Resource |
 |   Owner  |
 |          |
 +----------+
      ^
      |
     (B)
 +----|-----+          Client Identifier      +---------------+
 |         -+----(A)-- &amp; Redirection URI ----&gt;|               |
 |  User-   |                                 | Authorization |
 |  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |
 |          |                                 |               |
 |         -+----(C)-- Authorization Code ---&lt;|               |
 +-|----|---+                                 +---------------+
   |    |                                         ^      v
  (A)  (C)                                        |      |
   |    |                                         |      |
   ^    v                                         |      |
 +---------+                                      |      |
 |         |&gt;---(D)-- Authorization Code ---------'      |
 |  Client |          &amp; Redirection URI                  |
 |         |                                             |
 |         |&lt;---(E)----- Access Token -------------------'
 +---------+       (w/ Optional Refresh Token)

                注意：步骤A、B、C通过浏览器时分成两部分。

                 Figure 3: Authorization Code Flow
</code></pre>

<p>  图示3中包含以下步骤：</p>

<ol>
<li>客户端引导资源拥有者的浏览器到授权端口来初始化流程，客户端包括客户端Id、请求的范围、本地状态、用于重定向的URI。</li>
<li>权限服务器校验资源拥有者的身份，然后执行授权或者拒绝授权。</li>
<li>假设资源拥有者予以授权，权限服务器重定向浏览器到URI，该URI种包括之前提供了方位和本地状态。</li>
<li>客户单使用上一步骤中得到的授权码从服务器索取Access Token。发起请求时，客户端向权限服务器鉴权。客户端发送包含其重定向URI、授权码用于验证。</li>
<li>权限服务器鉴权客户端，校验授权码，确认重定向URI与注册时的匹配。如果验证通过，权限服务器发布Access Token，可选的发布刷新Token。</li>
</ol>


<p>  ### 4.1.1 Authorization Request（授权请求）
  客户端添加以下参数到查询部分到授权端点的URI（&#8221;application/x-www-form-urlencoded&#8221;格式）来构造授权请求：</p>

<ul>
<li> response_type：必须。值必须设置为“code”。</li>
<li> client_id：必须。客户端的身份Id。</li>
<li> redirect_uri：可选。</li>
<li> scope：可选。申请访问的范围。</li>
<li> state：建议使用。一个非透明的值用于客户端维护请求和回调时的状态。权限服务器在重定向回客户端时保留该值。该参数应该使用以避免跨站欺骗。</li>
</ul>


<p>  客户端通过重定向响应或其他手段引导资源拥有者到期构造的URI。</p>

<p>  举例，客户端引导浏览器发起TLS请求：</p>

<pre><code>GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
</code></pre>

<p>  权限服务器校验请求确保所有参数已提供并合法。如果合法权限服务器鉴权资源拥有者，并获取授权结果。</p>

<p>  一旦授权结论确定，权限服务器使用重定向或其它方式返回响应给client。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oauth2 Specification Protocol Endpoints]]></title>
    <link href="http://gangzz.github.io/blog/2015/02/22/oauth2-specification-protocol-endpoints/"/>
    <updated>2015-02-22T22:27:20+08:00</updated>
    <id>http://gangzz.github.io/blog/2015/02/22/oauth2-specification-protocol-endpoints</id>
    <content type="html"><![CDATA[<h1>3 Protocol Endpoints（协议端点）</h1>

<p>在授权过程中使用到了两个端点：</p>

<ul>
<li>授权端点：客户端通过资源拥有者的重定向获得授权信息。</li>
<li>Token端点：客户端向权限服务器获取access token。</li>
</ul>


<p>还存在一个client的端点：</p>

<ul>
<li>重定向端点：权限服务器向客户端返回授权的凭证。</li>
</ul>


<h2>3.1 Authorization Endpoint（授权端点）</h2>

<p>授权端点是权限服务器和资源拥有者交互以便获得授权信息的端点。权限服务器必须验证资源拥有者的身份，通过何种方式（用户名、密码，会话cookie）验证超出该协议范围。</p>

<p>Client通过何种方式获取权限服务器授权端点的路径超出了讨论范围，不过一般都会在权限服务器的文档中说明。</p>

<p>端点的URI可能包含一个&#8221;application/x-www-form-urlencoded&#8221;格式的查询组件，当添加额外参数时必须保留这个组件。端点URI中不能包括不完整的查询组件。</p>

<p>由于发往授权端点的请求将导致明文传输的授权凭证，权限服务器必须要求客户端建立TLS的请求。</p>

<p>权限服务器必须支持Http Get方法，同样可以支持POST方法。</p>

<p>不包含值得参数必须忽略对待，服务器必须忽略不认识的参数。请求和响应中的参数不得出现超过一次。</p>

<h3>3.1.1 Response Type （响应类型）</h3>

<p>授权端点是为授权码类型和简化类型的授权服务的，客户端使用以下参数知会服务器其期望的授权类型：</p>

<p>response_type：必须。必须是<a href="http://tools.ietf.org/html/rfc6749#section-4.1.1">章节4.1.1</a>中描述的&#8221;code&#8221;、<a href="http://tools.ietf.org/html/rfc6749#section-4.2.1">章节4.2.1</a>描述的获取access token的“token”或者<a href="http://tools.ietf.org/html/rfc6749#section-8.4">章节8.4</a>描述的已注册的扩展值之一。</p>

<p>扩展响应类型可能保护一个空格(%x20)分隔的的类别，其中值是顺序无关的，这部分响应类型的意义定义在其对应的协议中。</p>

<p>如果一个请求没有或者提供了不可识别的响应类型，权限服务器必须返回<a href="http://tools.ietf.org/html/rfc6749#section-4.1.2.1">4.1.2.1</a>中描述的错误。</p>

<h3>3.1.2 Redirection Point（重定向端点）</h3>

<p>权限服务器完成与资源拥有者的交互后，需要将资源拥有者的访问器重定向到客户端。服务器将重定向到在客户端注册过程中或者是申请权限时指定的位置。</p>

<p>重定向URI必须是<a href="http://tools.ietf.org/html/rfc3986#section-4.3">[RFC3986] Section 4.3</a>中定义的绝对路径的URI。该URI中可能包含&#8221;application/x-www-form-urlencoded&#8221;格式的查询部分，当添加额外的参数时必须保留该查询部分。URI中不能包含不完整的部分。</p>

<h4>3.1.2.1 Endpoint Request Confidentiality（端点请求的机密性）</h4>

<p>当响应类型是“code”或者“token”，或是重定向结果将导致敏感凭证在公网上传输时，重定向端点要求是TLS。该协议没有正式要求使用TLS，因为在该协议写作时期，使用TLS对客户端开发者来说可能是一个重大障碍。如果彼时TLS不可用，权限服务器需要在重定向之前警告资源拥有者正在导向不安全的URI。</p>

<p>TLS的缺乏将对客户端和保护的资源造成严重影响。当客户端使用代理最终用户的授权模式（如第三方登录）时，TLS的使用显得尤为重要。</p>

<h4>3.1.2.2 Registration Requirement（注册要求）</h4>

<p>权限服务器要求以下两种客户端必须注册它们的重定向端点：</p>

<ul>
<li>公共客户端。</li>
<li>采用简化模式的机密客户端。</li>
</ul>


<p>权限服务器要求所有客户端在调用授权端点以前必须注册它们的重定向端点。</p>

<p>权限服务器要求客户端提供完整的重定向URI（客户端可以使用“state”参数实现每个URL的自定义）。如果无法提供完整的重定向URI，客户端至少要提供URI模式、权限和路径（只允许查询部分是可以变化的）。</p>

<p>权限服务器允许客户端注册多个重定向端点。</p>

<p>如果客户端注册缺少了重定向，攻击者可以把授权端点当做open redirector使用<a href="http://tools.ietf.org/html/rfc6749#section-10.15">10.15</a>。</p>

<h4>3.1.2.3 Dynamic Configuration（动态配置）</h4>

<p>如果注册多个重定向URI、或者注册了部分URI、或者未注册URI，客户端在发送授权请求是要包含“redirect_uri&#8221;的参数。</p>

<p>如果注册了任何URI，权限服务器接收到&#8221;redirect_uri&#8221;参数时需确定其值至少匹配某一条已注册的URI。如果注册时使用了全URI，权限服务器须使用简单的文本比对方法确定两者一致。</p>

<h4>3.1.2.4 Invalid Endpoint(非法端点)</h4>

<p>如果授权请求缺少、非法、不匹配注册的URI，权限服务器需要通知资源拥有者并中断自动重定向。</p>

<h4>3.1.1.5 Endpoint Content（端点内容）</h4>

<p>指向Client的重定向请求一般会返回HTML的响应，该响应会由浏览器处理。如果该HTML直接作为请求的响应返回，其中的脚本将对重定向URI和包含的凭证有完全访问权。</p>

<p>客户端应该确保响应不包含第三方的脚本（统计脚本、社交插件等）。取而代之，它应该抽取重定向URI中包含的凭证，并返回浏览器另一个URI以免暴露凭证。如果要包含第三方脚本，客户端需要确保自己的脚本优先运行。</p>

<h2>3.2 Token Point（Token端点）</h2>

<p>Token端点用于客户端使用授权码或刷新Token获取access token。Token服务于除使用简化流程（因为直接发布了access token）以外的所有授权方式。</p>

<p>客户端如何获得Token端点的地址不在讨论范围，但一般可以在文档中获得。</p>

<p>如果端点URI包含&#8221;application/x-www-form-urlencoded&#8221;格式的查询部分则必须保存，不得包含不完整的查询。</p>

<p>由于涉及明文传输凭证，在发起请求时必须使用TLS。</p>

<p>客户端必须使用POST方法发起access token的请求。</p>

<p>客户端发起请求时不包含值得参数必须忽略。权限服务器需要忽略未知的参数。统一参数在请求中只能出现一次。</p>

<h3>3.2.1 Client Authentication（客户端鉴权）</h3>

<p>机密客户端或者其它发布凭证的客户端在发起Token端点请求前，必须要向权限服务器鉴权。客户端鉴权用于：</p>

<ul>
<li>强制绑定发布给其的授权码和刷新Token。当使用不安全通道传递授权码或者没有注册完全重定向URI时，客户端鉴权显得尤为重要。</li>
<li>恢复被禁用或者变更用户凭证的客户端，避免攻击者滥用偷得的刷新Token。改变单一的客户端凭证比作废全部刷新Token快得多。</li>
<li>实现鉴权管理最佳实践，需要定期凭证流转。实现全部刷新Token的流转是很具挑战的，相比实现一组用户凭着的流转更容易。</li>
</ul>


<p>向Token端点发起请求时客户单可使用&#8221;client_id&#8221;的参数表明其身份。发起“授权码”、“授权类型”的请求时，未鉴权的客户端必须发送“client_id”以免接受了本应该发给另一个客户单的信息。</p>

<h2>3.3 Access Token Scope（Access Token范围）</h2>

<p>授权和Token端点允许客户端使用“scope”参数指明请求的访问范围。反之，权限服务器在响应中使用“scope”参数指明所发布的token的范围。</p>

<p>“scope”的值使用空格分隔、大小写敏感的字符串列表表示。如果列表包含多条空格分隔，它们是顺序无关的，并且每条记录指示一个范围。</p>

<pre><code>scope       = scope-token *( SP scope-token )
scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
</code></pre>

<p>权限服务器可以全部或者部分的忽略客户端请求的范围，取决于全新服务器的策略或者资源拥有者的指令。如果响应范围和请求范围不同，权限服务器必须包含“scope”参数指明其发布的access token范围。</p>

<p>如果客户端请求省略了“scope”参数，服务器必须按照预设的范围或者失败本次请求。权限服务器应该文档化其的范围和默认值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oauth2 Specification Client Registration]]></title>
    <link href="http://gangzz.github.io/blog/2015/02/18/oauth2-specification-client-registration/"/>
    <updated>2015-02-18T11:56:02+08:00</updated>
    <id>http://gangzz.github.io/blog/2015/02/18/oauth2-specification-client-registration</id>
    <content type="html"><![CDATA[<h1>2. Client Registration</h1>

<p>开始启动协议之前，Client要在权限服务器注册自己。通过何种方式注册超出了该协议讨论范围，当时通常是通过HTML页面和终端用户交互。</p>

<p>协议中不曾规定客户端的注册必须直接与权限服务器交互，只要权限服务器支持，注册可以通过任何方式以便建立可信的关系或者获取必要的客户端属性（比如重定向URL、客户端类型等）。比如注册可以通过自发布或者第三方发布的校验机制完成，或者是权限服务器使用可信的渠道发现客户端。</p>

<p>当注册一个客户端的时应该：</p>

<ol>
<li>指明章节2.1中规定的客户端类型。</li>
<li>提供章节3.1.2中规定的重定向URL。</li>
<li>包含其他权限服务器要求的信息（应用名称、网站、描述、logo、接受的法律条款等）。</li>
</ol>


<h2>2.1 客户端类型</h2>

<p>OAuth根据与权限服务器达成安全认证的能力，定义了两种客户端类型（比如保存它们客户端凭证机密性的能力）。</p>

<p><strong>机密</strong>
客户端能够保证它们客户端凭证的机密性（比如客户端实现了严格限制凭证访问的安全服务器），或能通过其它途径保证它们授权的安全。</p>

<p><strong>公共</strong>
客户端不能够保证凭证的机密性(客户端运行在资源拥有者的设备上，比如安装的本地应用或是浏览器应用)，也没有其它途径保证安全。</p>

<p>权限服务器关于安全的定义和其可接受的客户端机密暴露级别决定了客户端的类型。权限服务器绝对不应该对客户端的类型有任何假设。</p>

<p>一个客户端（Client）可以是一组分布式的组件，每个组件有自己的客户端类型和安全环境（比如一个客户端保护一个基于服务器的机密组件和一个公共的浏览器客户端）。如果一个权限服务器不支持或者没有提供任何相关的指导，客户端应该分别注册自己的每个组件。</p>

<p>该协议是根据下面的各方面设计的：</p>

<ul>
<li><p>web application（网络应用）
网络应用是一个机密的运行于服务器的应用。资源拥有者使用运行在其设备上的客户端（浏览器）通过HTML页面进行访问。发布给客户端的用户凭证和Access Token一样都保存在服务器端，对资源拥有者是不可见的。</p></li>
<li><p>user-agent-based application</p></li>
</ul>


<p>客户端应用是从服务器下载并在资源拥有者所使用设备上的客户端（如浏览器）运行应用。协议和凭证数据能够轻易地被资源拥有者访问到。因为该类应用驻留在用户客户端（浏览器）中，它们能够很容易的利用容器的能力实现授权。</p>

<ul>
<li>native application</li>
</ul>


<p>本地应用是安装和运行在用户设备本地的应用。协议数据和凭证可以被资源拥有者访问到。一般假设应用中的任何授权信息都是可以被抽取的。另一方面，动态发布的凭证（access token和refresh token）可以在安全方面达到一定的可接受度。至少，可以抵御与该客户端交互的某些敌意的服务器。在一些平台上，可以防止同设备上其它应用的访问。</p>

<h2>2.2   客户端身份（Id）</h2>

<p>权限服务器发布给注册的客户端一个身份——一个代表了客户端信息的唯一字符串。这个身份不是加密的，它对资源拥有者是可见的，不能使用这个Id进行授权。客户端Id在一个权限服务器中是唯一的。</p>

<p>该协议并未规定Id的长度，客户端不应该猜测其长度。资源服务应该对其发布的任何Id进行说明。</p>

<h2>2.3 Client Authorization（客户端授权）</h2>

<p>如果客户端类型是机密，客户端和服务器会建立适合的安全方法达到服务器的安全要求。权限服务器可能接受客户端任何符合安全要求的数据。</p>

<p>机密类型的客户端可能被权限服务器授予一系列的凭证，用于授权（如用户名密码、共有/私有的key值对）。</p>

<p>权限服务器可能和公共类型的客户端建立授权方法，但是权限服务器不能依赖公共方法确定客户端的身份。</p>

<p>在每个请求中只能调用一个方法。</p>

<h3>2.3.1 Client Password （客户端密码）</h3>

<p>使用密码的客户端可能通过基本的Http授权方式向权限服务器请求授权<a href="http://tools.ietf.org/html/rfc2617">RFC2617</a>。客户端Id使用&#8221;application/x-www-form-urlencoded&#8221;编码并使用username作为Key，密码使用同样地编码方式并使用password作为Key。权限服务器必须支持基本Http授权的模式。</p>

<p>举例：
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3</p>

<p>可选的，权限服务器可以支持使用Request_Body中包含参数的方式：</p>

<ul>
<li>client_id</li>
</ul>


<p>必须。客户端Id在注册过程中发布给客户端（2.2节）。</p>

<ul>
<li>client_secret
必须。client secret。当其为空时客户端可以忽略这个参数。</li>
</ul>


<p>一般不推荐使用Rquest_Body的方式，而且应该仅限在客户端无法使用基本Http授权机制（和其它的授权机制）时。参数只能包含在RequestBody中，不能通过URI传递。</p>

<p>举例，使用RequestBody刷新AccessToken的请求：</p>

<pre><code> POST /token HTTP/1.1
 Host: server.example.com
 Content-Type: application/x-www-form-urlencoded

 grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
 &amp;client_id=s6BhdRkqt3&amp;client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
</code></pre>

<p>在使用密码进行授权时，权限服务器必须要求使用TLS（在6.1节中描述）。</p>

<p>因为这种机制引入了密码，权限服务器必须保护它以免任何终端利用暴力攻击的方式。</p>

<h3>2.3.2 其它授权方法</h3>

<p>权限服务器可选择任何满足安全要求的Http授权机制。当使用其它授权方法时，权限服务器必须定义客户端Id和授权机制直接的映射。</p>

<h3>2.3.3 未注册用户</h3>

<p>该协议不排除未注册客户端的使用，但是相关讨论超出了协议范围，并且需要额外的安全分析和重新审视对互操作性的冲突。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth2 Specification Introduction]]></title>
    <link href="http://gangzz.github.io/blog/2015/02/16/oauth2-specification-introduction/"/>
    <updated>2015-02-16T22:28:30+08:00</updated>
    <id>http://gangzz.github.io/blog/2015/02/16/oauth2-specification-introduction</id>
    <content type="html"><![CDATA[<h1>OAuth 2.0</h1>

<hr />

<h2>1.1 Role</h2>

<ul>
<li>Resource Owner：资源的拥有者，当资源拥有者指人的时候一般是终端用户。</li>
<li>Resource Server：资源不熟的服务器。负责响应合法Access_Token的资源请求。</li>
<li>Client：请求资源的客户端，可以使其它应用的服务器、桌面应用、其它设备等。</li>
<li>Authorization Server：授权服务器。在【资源拥有者】授权后颁发给Client合法的Access_Token，并保存授权信息。</li>
</ul>


<h2>1.2 Protocol Flow</h2>

<blockquote><pre><code>+--------+                               +---------------+
 |        |--(A)- Authorization Request -&gt;|   Resource    |
 |        |                               |     Owner     |
 |        |&lt;-(B)-- Authorization Grant ---|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(C)-- Authorization Grant --&gt;| Authorization |
 | Client |                               |     Server    |
 |        |&lt;-(D)----- Access Token -------|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(E)----- Access Token ------&gt;|    Resource   |
 |        |                               |     Server    |
 |        |&lt;-(F)--- Protected Resource ---|               |
 +--------+                               +---------------+
</code></pre></blockquote>

<p>Figure 1: Abstract Protocol Flow</p>

<ol>
<li>Client直接或者间接向Resource Owner索取资源的授权。</li>
<li>Resource Owner返回授权信息给Client（grant code）。</li>
<li>Client向Authorization Server发送包含授权信息的请求。</li>
<li>Authorization Server颁发Access_Token给Client。</li>
<li>Client使用Access_Token向Resource Server请求感兴趣的资源。</li>
<li>Resource Server验证Access_Token的有效性（向Authorization Server）后，响应Client请求。</li>
</ol>


<h2>1.3 Authorization Grant</h2>

<p>认证授权是一张代表了资源拥有者授权的证书，Client用它获取Access_Token。OAuth2提供了四种授权类型：authorization code， implicit， resource owner password credentials(UserName, Password)，client credential——第四种提供客户端的可扩展性。</p>

<h3>1.3.1 Authorization Code</h3>

<p>通过介于Client和Resource Owner之间的Authorization Server获取授权码。与直接向Resource Owner索取授权不同，Client把Resource Owner导向授权服务器，在获取到授权后该服务器将Resource Owner和授权码导向Client。</p>

<p>在把Resource Owner和授权码导向Client之前，Authorization Server对其鉴权并获得授权。由于Resource Owner只需要和Authorization Server打交道，Resource Owner的证书不需要和Client共享的。</p>

<p>授权码的机制提供了几个安全方面重要的好处，比如鉴定Client、直接把Access_Token传递给Client，而不需要经过Resource Owner——那将存在暴露给第三方的潜在风险。</p>

<h3>1.3.2 Implicit（简化）</h3>

<p>Implicit流程是Authorization Code的简化版本，主要用于浏览器中脚本实现。在Implicit流程中不是颁发授权码（Authorization Code）而是直接传递Access_Token给Client。这个授权过程是暗含的，这其中没有中间证书的发布（如Authorization Code）。</p>

<p>在传递Access_Token给Client的过程中，Authorization Server是不对Client鉴定的。有些情况下，可能通过Redirect Url鉴定Client，但是在发布过程中Access_Token可能会被Resource Owner和任何有权获得Client User-Agent的设备截获。</p>

<p>暗含授权机制提升了一些客户端（如浏览器内App）的响应性和效率，因为它降低了获得Access_Token过程中的交互旅程。然而，必须权衡该便利性带来的安全方面的损失，特别是在Authorization Code方式可选的时候，这部分将在<a href="http://tools.ietf.org/html/rfc6749#section-10.3">10.3</a>和<a href="http://tools.ietf.org/html/rfc6749#section-10.16">10.6</a>节讲述。</p>

<h3>1.3.3 Resource Owner Password Credentials</h3>

<p>Resource Owner的密码证书（如用户名+密码）可以作为直接获得Access_Token的授权方式。这种授权方式应该只在Resource Owner和Client存在充分信任的情况下使用，而且是其它授权机制无法使用时（比如Client是客户设备操作系统的一部分或者高优先级的程序）。</p>

<p>虽然这种认证方式要求Client能够直接访问Resource Owner的密码证书，但是还是要求在单独的请求中传递Resource Owner的证书来换取密码。该机制应避免在Client中记录Resource Owner的密码，可以通过使用长期的Access_Token或者Refresh_Token方式代替。</p>

<h3>1.3.4 Client Credentials</h3>

<p>当被请求资源是Client自己控制的或者被请求资源是预先与Authorization Server商定好的场景下，可以采用客户端（Client)认证。Client Credential被用作鉴权方案，通常是Client就是Resource Owner自身或者是被请求资源的授权已经预先在Authorization Server设定好的。</p>

<h2>1.4 Access Token</h2>

<p>Access Token是用来获取被保护资源的凭证。一个Access Token是一段代表了向client授权的字符串。该字符串对Client通常非透明的。它规定了授权的区间和范围，由Resource Owner授权，由Authorization Server和Resource Server执行。</p>

<p>Access Token可能是用于检索权限信息的Id，也可能是符合某种校验规格的包含权限信息的数据（比如包含数据和签名）。客户端（Client）在使用Access Token时可能还要引入额外的鉴权机制——这超出了该规格的讨论范围。</p>

<p>Access Token提供了一个授权的抽象层，使用可被Resource Server理解的单一token替代了其它不同的验证机制。在这个抽象中发布证书的动作比授权证书的动作更严格，同时免去了Resource Server要了解一大堆授权方法的痛苦。</p>

<p>基于Resource Server对安全性的要求，Access tokens可以存在不同的格式、构造和可用方法。Access Token的属性和方法超出了本规格的范围，在一些同伴规格比如<a href="http://tools.ietf.org/html/rfc6750">[RFC6750]</a>中有其相关的定义。</p>

<h2>1.5 Refresh Token</h2>

<p>Refresh Token是一种用于获取Access Token的凭证。Refresh Token由Authorization Server发布，用于获取新的Access Token（当原有变为非法或失效后），或者用于获得具备同样或者更窄范围的额外Access Token（一个生命周期更短，或者范围比Resource Owner授权的更窄的Access Token）。是否发布Refersh Token是Authorization Server自主决定的。Refresh Token的发布是包含在Access Token的发布中的。</p>

<p>Refresh Token是代表了Resource Owner授权的字符串，通常对Client是非透明的。这个字符串代表了获取授权信息的Id。与Access Token不同 Refresh Token只用于和Authorization Server交互，不会用于Resource Server。</p>

<pre><code>  +--------+                                           +---------------+
  |        |--(A)------- Authorization Grant ---------&gt;|               |
  |        |                                           |               |
  |        |&lt;-(B)----------- Access Token -------------|               |
  |        |               &amp; Refresh Token             |               |
  |        |                                           |               |
  |        |                            +----------+   |               |
  |        |--(C)---- Access Token ----&gt;|          |   |               |
  |        |                            |          |   |               |
  |        |&lt;-(D)- Protected Resource --| Resource |   | Authorization |
  | Client |                            |  Server  |   |     Server    |
  |        |--(E)---- Access Token ----&gt;|          |   |               |
  |        |                            |          |   |               |
  |        |&lt;-(F)- Invalid Token Error -|          |   |               |
  |        |                            +----------+   |               |
  |        |                                           |               |
  |        |--(G)----------- Refresh Token -----------&gt;|               |
  |        |                                           |               |
  |        |&lt;-(H)----------- Access Token -------------|               |
  +--------+           &amp; Optional Refresh Token        +---------------+

           Figure 2: Refreshing an Expired Access Token
</code></pre>

<p>图标2中展示的流程：</p>

<ol>
<li>客户端向权限服务器发送授权信息和鉴定请求，请求一个Access Token。</li>
<li>权限服务器鉴定客户端并验证授权信息的合法性，如果合法发布一个Access Token和一个Refresh Token。</li>
<li>客户端提交对受保护资源的请求和Access Token。</li>
<li>资源服务器鉴定Access Token合法性，如合法响应请求。</li>
<li>步骤（3）和步骤（4）不断进行，直到Access Token失效。如果客户端发觉Access Token失效它会跳转到步骤（7），否则继续（3）。</li>
<li>因为Access Token已经失效，资源服务器返回token失效错误。</li>
<li>客户端传递鉴定请求和Refresh Token给权限服务器，获取新的Access Token。客户端的授权需求基于客户端类型和权限服务器的策略。</li>
<li>权限服务器鉴权Client并验证Refresh Token，如果合法，发布新的Access Token（有可能包括新的Refresh Token）。</li>
</ol>


<p>步骤3，4,5,6超出了本规格范围。</p>

<h2>1.6 TLS Version</h2>

<p>TLS(Transport Layer Security)。无论该协议选择哪个TLS，随着广泛部署和安全弱点的暴露，都有会心的TLS出现。到目前为止TLS 1.2是最新的版本，但是它还存在较多部署限制并且可能还不适合实现。TLS 1.0<a href="http://tools.ietf.org/html/rfc2246">RFC2246</a>是目前最广泛部署的版本，并且提供了良好的协同性。</p>

<p>不同的实现可能还选择了额外的TLS机制满足他们的安全需要。</p>

<h2>1.7 HTTP Redirections</h2>

<p>在协议中扩展使用了Http重定向，客户端或者权限服务器使用这种方式彼此传递Resource Owner的user-agent。在当前协议中使用了Http的302状态码的方式，其它经由user-agent的方式也是被允许的并且可以视为一种具体实现。</p>

<h2>1.8 Interoperability(互操作性)</h2>

<p>OAuth 2.0提供了一个丰富的框架和良好定义的安全特性。然而，作为一个包含众多可选组件的丰富且高可扩展的框架，就自身而言，这份协议倾向于产生一个广泛的不可互操作的实现。</p>

<p>除此以外，协议中有少量的必要组件是部分实现或未实现（如客户端注册、权限服务器扩展性、终端发现）。缺失了这些组件，客户端只能人工并且针对权限服务器和资源服务器配置才能实现互操作性。</p>

<p>协议的定义存在一个明确的期待——将来的工作会定义规范的资料和必要的扩展，以实现全面的网络层互操作性。</p>

<h2>1.9 Notational Conventions(标记约定)</h2>

<p>关键字&#8221;MUST&#8221;, &ldquo;MUST NOT&rdquo;, &ldquo;REQUIRED&rdquo;, &ldquo;SHALL&rdquo;, &ldquo;SHALL NOT&rdquo;, &ldquo;SHOULD&rdquo;, &ldquo;SHOULD NOT&rdquo;, &ldquo;RECOMMENDED&rdquo;, &ldquo;MAY&rdquo;, and &ldquo;OPTIONAL&#8221;的示意在<a href="http://tools.ietf.org/html/rfc2119">RFC2119</a>中定义.</p>

<p>本协议使用Augmented Backus-Naur Form (ABNF)<a href="http://tools.ietf.org/html/rfc5234">RFC5234</a>标记。此外, 从&#8221;Uniform Resource Identifier (URI): Generic Syntax“ <a href="http://tools.ietf.org/html/rfc3986">RFC3986</a>引入了URI-reference的规定。</p>

<p>某些安全相关的短语采用<a href="http://tools.ietf.org/html/rfc4949">RFC4949</a>中的场景理解.这些短语包括但不限于：&#8221;attack&#8221;, &ldquo;authentication&rdquo;, &ldquo;authorization&rdquo;, &ldquo;certificate&rdquo;,&ldquo;confidentiality&rdquo;, &ldquo;credential&rdquo;, &ldquo;encryption&rdquo;, &ldquo;identity&rdquo;, &ldquo;sign&rdquo;,&ldquo;signature&rdquo;, &ldquo;trust&rdquo;, &ldquo;validate&rdquo;, and &ldquo;verify&rdquo;.</p>

<p>除非特殊说明，左右协议的参数名和值都是大小写敏感的。</p>
]]></content>
  </entry>
  
</feed>
